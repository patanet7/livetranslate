# LiveTranslate Docker Security Configuration
# Created: 2025-06-07
# Purpose: Define security measures and best practices for LiveTranslate Docker infrastructure


# Security Architecture Overview:
# - Non-root users in all containers
# - Resource limits to prevent DoS attacks
# - Network segmentation and isolation
# - Secrets management for sensitive data
# - Security policies and access controls
# - Container hardening and minimal attack surface

# === SECURITY CONFIGURATION TEMPLATE ===

services:
  # Example service with comprehensive security measures
  example-service:
    image: livetranslate/example:latest
    
    # === USER SECURITY ===
    user: "1001:1001"  # Non-root user (UID:GID)
    
    # === RESOURCE LIMITS ===
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
          pids: 100
        reservations:
          cpus: '0.5'
          memory: 512M
    
    # === SECURITY OPTIONS ===
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
      - seccomp:unconfined  # Only if needed for specific functionality
    
    # === CAPABILITY MANAGEMENT ===
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
      # Add only necessary capabilities
    
    # === READ-ONLY FILESYSTEM ===
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/tmp:noexec,nosuid,size=50m
    
    # === ENVIRONMENT SECURITY ===
    environment:
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      - FLASK_ENV=production
    
    # === SECRETS MANAGEMENT ===
    secrets:
      - api_key
      - db_password
    
    # === NETWORK SECURITY ===
    networks:
      - livetranslate-backend
    
    # === VOLUME SECURITY ===
    volumes:
      - type: volume
        source: app-data
        target: /app/data
        read_only: false
      - type: tmpfs
        target: /app/tmp
        tmpfs:
          size: 100m
          mode: 1777

# === SECRETS CONFIGURATION ===
secrets:
  api_key:
    external: true
    name: livetranslate_api_key
  
  db_password:
    external: true
    name: livetranslate_db_password
  
  jwt_secret:
    external: true
    name: livetranslate_jwt_secret

# === SECURITY BEST PRACTICES ===

# 1. Container Image Security:
#    - Use official base images from trusted registries
#    - Regularly update base images for security patches
#    - Scan images for vulnerabilities (docker scan, trivy, clair)
#    - Use minimal base images (alpine, distroless)
#    - Remove unnecessary packages and files

# 2. User and Permission Security:
#    - Never run containers as root user
#    - Create dedicated non-root users in Dockerfiles
#    - Use consistent UID/GID across containers
#    - Set proper file permissions in containers

# 3. Resource Security:
#    - Set CPU and memory limits to prevent resource exhaustion
#    - Limit process count (pids) to prevent fork bombs
#    - Monitor resource usage and set alerts

# 4. Network Security:
#    - Use custom networks instead of default bridge
#    - Implement network segmentation (frontend/backend/data)
#    - Disable unnecessary network protocols
#    - Use TLS for inter-service communication

# 5. Filesystem Security:
#    - Use read-only filesystems where possible
#    - Mount sensitive directories as read-only
#    - Use tmpfs for temporary data
#    - Implement proper volume permissions

# 6. Secrets Management:
#    - Never store secrets in environment variables
#    - Use Docker secrets or external secret managers
#    - Rotate secrets regularly
#    - Audit secret access

# 7. Runtime Security:
#    - Drop all capabilities by default
#    - Add only necessary capabilities
#    - Use security profiles (AppArmor, SELinux)
#    - Enable no-new-privileges flag

# 8. Monitoring and Auditing:
#    - Enable Docker daemon logging
#    - Monitor container behavior
#    - Set up security alerts
#    - Regular security audits

# === DOCKERFILE SECURITY TEMPLATE ===

# Example secure Dockerfile:
# FROM python:3.11-alpine
# 
# # Create non-root user
# RUN addgroup -g 1001 appgroup && \
#     adduser -D -u 1001 -G appgroup appuser
# 
# # Set working directory
# WORKDIR /app
# 
# # Copy and install dependencies
# COPY requirements.txt .
# RUN pip install --no-cache-dir -r requirements.txt
# 
# # Copy application code
# COPY --chown=appuser:appgroup . .
# 
# # Set proper permissions
# RUN chmod -R 755 /app && \
#     chmod +x /app/entrypoint.sh
# 
# # Switch to non-root user
# USER appuser
# 
# # Health check
# HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
#   CMD curl -f http://localhost:8080/health || exit 1
# 
# # Expose port
# EXPOSE 8080
# 
# # Start application
# CMD ["python", "app.py"]

# === SECURITY COMMANDS ===

# Create secrets:
# echo "your-api-key" | docker secret create livetranslate_api_key -
# echo "your-db-password" | docker secret create livetranslate_db_password -

# Scan images for vulnerabilities:
# docker scan livetranslate/service:latest
# trivy image livetranslate/service:latest

# Check container security:
# docker run --rm -it --pid host --userns host --cap-add audit_control \
#   -v /etc:/etc:ro -v /usr/bin/docker:/usr/bin/docker:ro \
#   -v /usr/lib/systemd:/usr/lib/systemd:ro \
#   -v /var/lib:/var/lib:ro -v /var/run/docker.sock:/var/run/docker.sock:ro \
#   docker/docker-bench-security

# Monitor container processes:
# docker exec <container> ps aux
# docker stats <container>

# === SECURITY CHECKLIST ===

# [ ] All containers run as non-root users
# [ ] Resource limits configured for all services
# [ ] Network segmentation implemented
# [ ] Secrets management configured
# [ ] Read-only filesystems where applicable
# [ ] Security capabilities properly configured
# [ ] Container images scanned for vulnerabilities
# [ ] Security monitoring and alerting enabled
# [ ] Regular security audits scheduled
# [ ] Incident response procedures documented 