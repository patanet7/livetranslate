[tool:pytest]
# Pytest configuration for comprehensive audio flow testing

# Test discovery
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Markers for test categorization
markers =
    integration: Integration tests
    unit: Unit tests
    performance: Performance and benchmark tests
    error: Error handling and edge case tests
    format: Audio format compatibility tests
    slow: Slow-running tests (excluded by default)
    regression: Regression tests
    smoke: Smoke tests for quick validation
    
    # Audio-specific markers
    audio_pipeline: Complete audio pipeline tests
    whisper_service: Whisper service integration tests
    translation_service: Translation service integration tests
    format_wav: WAV format tests
    format_mp3: MP3 format tests
    format_webm: WebM format tests
    format_ogg: OGG format tests
    format_mp4: MP4 format tests
    format_flac: FLAC format tests
    
    # Quality markers
    high_quality: High audio quality tests
    medium_quality: Medium audio quality tests
    low_quality: Low audio quality tests
    
    # Speaker markers
    single_speaker: Single speaker tests
    multi_speaker: Multiple speaker tests
    speaker_diarization: Speaker diarization tests
    
    # Service markers
    service_integration: Service integration tests
    service_failure: Service failure simulation tests
    configuration: Configuration management tests

# Output options
addopts = 
    --strict-markers
    --tb=short
    --durations=10
    --maxfail=5
    --color=yes
    --disable-warnings
    -ra

# Asyncio configuration
asyncio_mode = auto

# Logging
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Timeout for tests
timeout = 300

# Minimum Python version
minversion = 3.8

# Test collection timeout
collect_timeout = 60

# Coverage configuration (if using pytest-cov)
[coverage:run]
source = src
omit = 
    tests/*
    */test_*
    */__pycache__/*
    */migrations/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    pass