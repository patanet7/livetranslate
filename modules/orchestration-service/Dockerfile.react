# Multi-stage Dockerfile for React + FastAPI Migration
# This Dockerfile supports the React migration plan outlined in REACT_MIGRATION_PLAN.md

# Stage 1: Build React Frontend
FROM node:18-alpine AS frontend-build

# Set working directory
WORKDIR /app

# Install dependencies
COPY frontend/package.json frontend/package-lock.json ./
RUN npm ci --only=production

# Copy source code
COPY frontend/ ./

# Build the React application
RUN npm run build

# Stage 2: Build FastAPI Backend
FROM python:3.11-slim AS backend-build

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    make \
    libffi-dev \
    libssl-dev \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies
COPY backend/requirements.txt ./
RUN pip install --no-cache-dir -r requirements.txt

# Copy backend source code
COPY backend/ ./

# Copy built frontend from previous stage
COPY --from=frontend-build /app/dist ./static

# Stage 3: Production Runtime
FROM python:3.11-slim AS production

# Set working directory
WORKDIR /app

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN useradd --create-home --shell /bin/bash app

# Copy Python dependencies
COPY --from=backend-build /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=backend-build /usr/local/bin /usr/local/bin

# Copy application code
COPY --from=backend-build /app /app

# Create necessary directories
RUN mkdir -p /app/uploads /app/logs && \
    chown -R app:app /app

# Switch to non-root user
USER app

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/api/health || exit 1

# Start command
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4"]

# Development Stage (for local development)
FROM python:3.11-slim AS development

WORKDIR /app

# Install development dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    make \
    libffi-dev \
    libssl-dev \
    curl \
    git \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies
COPY backend/requirements.txt backend/requirements-dev.txt ./
RUN pip install --no-cache-dir -r requirements-dev.txt

# Copy application code
COPY backend/ ./

# Create development directories
RUN mkdir -p /app/uploads /app/logs

# Expose port
EXPOSE 8000

# Development command with auto-reload
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

# Testing Stage
FROM development AS testing

# Install testing dependencies
RUN pip install --no-cache-dir pytest pytest-asyncio pytest-cov

# Copy test files
COPY backend/tests/ ./tests/

# Run tests
CMD ["pytest", "--cov=app", "--cov-report=html", "--cov-report=term-missing"]

# Labels for metadata
LABEL maintainer="LiveTranslate Team"
LABEL description="LiveTranslate Orchestration Service - React Frontend + FastAPI Backend"
LABEL version="2.0.0"
LABEL react.version="18.2.0"
LABEL fastapi.version="0.95.0"
LABEL python.version="3.11"
LABEL node.version="18"