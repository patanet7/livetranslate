version: '3.8'

# LiveTranslate Orchestration Service with Integrated Monitoring
# Comprehensive observability stack with Prometheus, Grafana, AlertManager, and Loki

services:
  # === CORE ORCHESTRATION SERVICE ===
  orchestration-service:
    build: .
    ports:
      - "3000:3000"
    environment:
      # Service URLs for orchestration  
      - WHISPER_SERVICE_URL=http://audio-service:5001
      - TRANSLATION_SERVICE_URL=http://translation-service:5003
      
      # Configuration
      - LOG_LEVEL=INFO
      - SECRET_KEY=orchestration-secret-key-change-in-production
      
      # WebSocket settings
      - WEBSOCKET_MAX_CONNECTIONS=10000
      - WEBSOCKET_TIMEOUT=1800
      
      # Monitoring integration
      - PROMETHEUS_METRICS_ENABLED=true
      - HEALTH_CHECK_INTERVAL=10
      
      # Logging for Loki
      - LOG_FORMAT=json
      - LOG_FILE=/app/logs/orchestration.log
      
    volumes:
      - ./config:/app/config
      - ./logs:/app/logs
      - ./monitoring:/app/monitoring
    
    networks:
      - livetranslate
      - monitoring
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

    labels:
      - "monitoring.enabled=true"
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=3000"
      - "prometheus.io/path=/api/metrics"

  # === MONITORING STACK ===
  
  # Prometheus - Metrics Collection and Storage
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: livetranslate-prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--log.level=info'
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    networks:
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # AlertManager - Alert Processing and Notification
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: livetranslate-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager:/etc/alertmanager
      - alertmanager-data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--log.level=info'
    networks:
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Grafana - Data Visualization and Dashboards
  grafana:
    image: grafana/grafana:10.1.0
    container_name: livetranslate-grafana
    ports:
      - "3001:3000"  # Use 3001 to avoid conflict with orchestration service
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=livetranslate2023
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
      - GF_PROVISIONING_PATH=/etc/grafana/provisioning
    volumes:
      - ./monitoring/grafana:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    networks:
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Loki - Log Aggregation
  loki:
    image: grafana/loki:2.9.0
    container_name: livetranslate-loki
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki:/etc/loki
      - loki-data:/loki
    command: -config.file=/etc/loki/loki.yml
    networks:
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Promtail - Log Collection
  promtail:
    image: grafana/promtail:2.9.0
    container_name: livetranslate-promtail
    volumes:
      - ./monitoring/loki:/etc/promtail
      - ./logs:/var/log/livetranslate:ro
      - /var/log:/var/log/host:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/promtail.yml
    networks:
      - monitoring
    restart: unless-stopped
    depends_on:
      - loki

  # === SYSTEM MONITORING ===
  
  # Node Exporter - System Metrics
  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: livetranslate-node-exporter
    ports:
      - "9100:9100"
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - monitoring
    restart: unless-stopped

  # cAdvisor - Container Metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: livetranslate-cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - monitoring
    restart: unless-stopped

# === NETWORKS ===
networks:
  livetranslate:
    external: true
  monitoring:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# === PERSISTENT VOLUMES ===
volumes:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  alertmanager-data:
    driver: local
  loki-data:
    driver: local